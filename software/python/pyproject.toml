# Merge this file with your existing pyproject.toml file

##############
# DEPENDENCIES
[dependency-groups]
dev = [
  "pre-commit==4.0.1",
  "pyright==1.1.391",
  "ruff==0.8.5",
  "pytest==8.3.4",
  "debtcloset==0.4.1",
  "bump-my-version==0.30.0",
]

#############
# PACKAGE BUILD STUFF
[tool.uv]
package = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

#############
# VERSIONING
[tool.bumpversion]
# current_version = "0.1.0" # UPDATE AND UNCOMMENT
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
moveable_tags = []
commit_args = "--no-verify"
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "pyproject.toml"

##############
# PYRIGHT
[tool.pyright]
# docs: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
typeCheckingMode = "standard" # This is the default, but consider "basic" or "strict" as alternatives at the extremes

##############
# RUFF
[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  # ruff defaults:
  "E4", "E7", "E9", "F",
  # pycodestyle line formatting including line length
  "E5",
  # additional rule groups:
  "I", # flake8-import-order
  "TID", # flake8-tidy-imports
  "D", # google-style docstrings,
  "ANN", # require pyright type annotations
]
ignore = [
  "ANN002", # Missing type annotation for *args
  "ANN003", # Missing type annotation for **kwargs
  "ANN101", # Missing type annotation for self in method
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
  "D202", # would require one blank line after the last section of a multi-line docstring
  "D203", # would require one blank line at start of class docstring
  "D213", # would require multi-line docstring to start with a hard return
  "D401", # would require imperative mood in docstring
  "D413", # would put blank line at end of each multiline docstring
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"] # would require module-level documentation
"test_*.py" = [
  "D", # would put requirements on docstrings in test files
  "ANN201", # would require return type hint (normally None) for test functions
]
